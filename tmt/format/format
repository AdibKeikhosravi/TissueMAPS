#!/usr/bin/env python
# encoding: utf-8
import os
import sys
import glob
from functools import partial
import traceback
import argparse
from . import config
from . import __version__
from .. import utils
from ..api import Format


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Use Bio-Formats to extract images and metadata from '
                    'vendor-specific image formats.')

    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + __version__,
                        help='Display version')

    subparsers = parser.add_subparsers()

    run_parser = subparsers.add_parser(
                    'run', help='run extraction of images and metadata'
    )

    run_parser.add_argument('upload_folder', type=str,
                            help='path to image file')
    run_parser.add_argument('-w', '--wildcards', dest='wildcards',
                            type=str, default='*',
                            help='wildcards (globbing patterns) '
                                 'to select subset of files in "image_folder"')
    run_parser.add_argument('-o', '--output', dest='output_dir', type=str,
                            help='path to output directory, \
                                  where images should be saved')
    run_parser.add_argument('-s', '--save', dest='save', action='store_true',
                            help='save extracted images and metadata')
    run_parser.add_argument('--format_config', dest='format_config',
                            help='use custom yaml configuration file \
                                  (defaults to "format" configuration)')
    run_parser.add_argument('-c', '--config', dest='config',
                            help='use custom yaml configuration file \
                                  (defaults to "tmt" configuration)')

    run_parser.set_defaults(handler=partial(Format.process_cli_commands,
                                            subparser=run_parser))

    args = parser.parse_args()

    files = glob.glob(args.image_folder, args.wildcards)

    if args.save_images:
        if not os.path.exists(args.output_dir):
            os.mkdir(args.output_dir)

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = utils.load_config(args.config)
        utils.check_config(args.config)
    else:
        args.config = config

    if 'format_config' in args:
        if args.format_config:
            # Overwrite default "format" configuration
            print '. Using configuration file "%s"' % args.format_config
            args.config_file = args.config.copy()
            format_configuration = utils.load_config(args.format_config)
        else:
            format_configuration = tmt.info.config
            args.config_file = ''
    else:
        format_configuration = tmt.info.config
        args.config_file = ''

    # Add "info" to "tmt" configuration
    args.config.update(format_configuration)

    try:
        if args.handler:
            args.handler(args)
            print 'üç∫  Done!'
        else:
            parser.print_help()
    except Exception as error:
        sys.stdout.write('Failed. ')
        sys.stdout.write('Error message: "%s"\n' % str(error))
        for tb in traceback.format_tb(sys.exc_info()[2]):
            sys.stdout.write(tb)
