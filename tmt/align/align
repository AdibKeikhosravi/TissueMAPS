#!/usr/bin/env python
# encoding: utf-8
import os
import sys
from functools import partial
import traceback
import argparse
import tmt.util
import tmt.align
from tmt.align.api import Align


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
            description='''
                Calculate shift in y,x direction for images, which were
                acquired in different "cycles", i.e. at the same sites but at
                different time points.
            ''')

    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + tmt.align.__version__,
                        help='Display version')

    subparsers = parser.add_subparsers()

    run_parser = subparsers.add_parser('run',
                            help='run shift calculation')

    run_parser.add_argument('experiment_dir', default=os.getcwd(),
                            help='experiment directory')

    run_parser.add_argument('-j', '--job', dest='job', type=int,
                            help='id of the job to process (integer)')

    run_parser.add_argument('--ref_cycle', dest='ref_cycle', type=int,
                            help='reference cycle number \
                                  (defaults to number of last cycle)')

    run_parser.add_argument('--ref_channel', dest='ref_channel',
                            type=int, default=1,
                            help='reference channel number (defaults to 1)')

    run_parser.add_argument('-c', '--config', dest='config',
                            help='use custom yaml configuration file \
                                  (defaults to "tmt" configuration)')

    run_parser.set_defaults(handler=partial(Align.process_cli_commands,
                                            subparser=run_parser))

    fuse_parser = subparsers.add_parser('fuse',
                            help='fuse calculated shifts')

    fuse_parser.add_argument('experiment_dir', default=os.getcwd(),
                             help='experiment directory')

    fuse_parser.add_argument('--ref_cycle', dest='ref_cycle', type=int,
                             help='reference cycle number \
                                   (defaults to number of last cycle)')

    fuse_parser.add_argument('--segm_dir', dest='segm_dir', type=str,
                             help='relative path to segmentation directory \
                                   (relative from other cycle subdirectory)')

    fuse_parser.add_argument('--segm_trunk', dest='segm_trunk',type=str,
                             help='trunk of segmentation filenames \
                                   (substring image filenames have in common)')

    fuse_parser.add_argument('-m', '--max_shift', dest='max_shift',
                             type=int, default=100,
                             help='maximally tolerated shift in pixels \
                                   (defaults to 100)')

    fuse_parser.add_argument('-c', '--config', dest='config',
                             help='use custom yaml configuration file \
                                   (defaults to "tmt" configuration)')

    fuse_parser.set_defaults(handler=partial(Align.process_cli_commands,
                                             subparser=fuse_parser))

    joblist_parser = subparsers.add_parser('joblist',
                                help='create a joblist for parallel computing \
                                      (.joblist YAML file in parent directory \
                                       of "stk_folder")')

    joblist_parser.add_argument('experiment_dir', default=os.getcwd(),
                                help='experiment directory')

    joblist_parser.add_argument('--ref_cycle', dest='ref_cycle', type=int,
                                help='reference cycle number \
                                      (defaults to number of last cycle)')

    joblist_parser.add_argument('--ref_channel', dest='ref_channel',
                                type=int, default=1,
                                help='reference channel number \
                                      (defaults to 1)')

    joblist_parser.add_argument('-b', '--batch_size', dest='batch_size',
                                type=int, default=5,
                                help='number of files that should be \
                                      processed per job (defaults to 5)')

    joblist_parser.add_argument('-c', '--config', dest='config',
                                help='use custom yaml configuration file \
                                      (defaults to "tmt" configuration)')

    joblist_parser.set_defaults(handler=partial(Align.process_cli_commands,
                                                subparser=joblist_parser))

    args = parser.parse_args()

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = tmt.util.load_config(args.config)
        print '. Checking configuration file'
        tmt.util.check_config(args.config)
    else:
        args.config = tmt.config

    try:
        if args.handler:
            args.handler(args)
            print 'üç∫  Done!'
        else:
            parser.print_help()
    except Exception as error:
        sys.stdout.write('Failed. ')
        print 'Error message: "%s"\n' % str(error)
        for tb in traceback.format_tb(sys.exc_info()[2]):
            print tb
