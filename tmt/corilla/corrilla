#!/usr/bin/env python
import os
import numpy as np
import tmt
import h5py
from tmt.project import Project
from tmt.corilla.stats import OnlineStatistics


if __name__ == '__main__':
    import argparse

    print tmt.corilla.logo % {'version': tmt.corilla.__version__}

    parser = argparse.ArgumentParser(
                    description='''
                    Calculate online statistics (mean and standard deviation)
                    at each pixel position over a series of microscopic images
                    in order to estimate the illumination artifact.
                    '''
    )

    parser.add_argument('project_dir', nargs='*',
                        help='absolute path to project directory')

    parser.add_argument('-c', '--config', dest='config',
                        help='path to custom yaml configuration file \
                              (defaults to "datafusion" configuration)')

    args = parser.parse_args()

    if not os.path.exists(args.project_dir):
        raise IOError('Project directory does not exist: "%s"'
                      % args.project_dir)

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = tmt.util.load_config(args.config)
        print '. Checking configuration file'
        tmt.util.check_config(args.config)
    else:
        args.config = tmt.config

    project = Project(args.project_dir, args.config)

    channels = np.unique([i.channel for i in project.image_files])
    print 'Found %d channels' % len(channels)
    for c in channels:
        print '. Calculating statistics for channel #%d' % c
        images = [i for i in project.image_files if i.channel == c]

        dims = images[0].dimensions
        stats = OnlineStatistics(dims)
        for im in images:
            print im.filename
            stats.update(im.image)

        stats_filename = tmt.config['STATS_FILE_FORMAT'].format(channel=c)
        stats_filename = os.path.join(project.stats_dir, stats_filename)
        print '. Writing statistics to HDF5 file: "%s"' % stats_filename

        # NOTE: Matlab transposes the arrays upon writing them to the HDF5 file
        # We won't do this! But this will create conflicts with existing code!
        f = h5py.File(stats_filename, 'w')
        f.create_dataset('/stat_values/mean', data=stats.mean)
        f.create_dataset('/stat_values/std', data=stats.std)
        f.close()
