#!/usr/bin/env python
# encoding: utf-8
import os
import sys
import tmt
from functools import partial
import traceback
from tmt.corilla.api import Corilla


if __name__ == '__main__':
    import argparse

    print tmt.corilla.logo % {'version': tmt.corilla.__version__}

    parser = argparse.ArgumentParser(
                    description='''
                    Calculate online statistics (mean and standard deviation)
                    at each pixel position over a set of images.
                    '''
    )

    subparsers = parser.add_subparsers()

    run_parser = subparsers.add_parser('run',
                            help='run calculation of statistics')

    run_parser.add_argument('project_dir', nargs='?', default=os.getcwd(),
                            help='path to project directory')

    run_parser.add_argument('--channel', dest='channel', type=int,
                            help='number of channel to process')

    run_parser.add_argument('-c', '--config', dest='config',
                            help='path to custom yaml configuration file \
                                  (defaults to "tmt" configuration)')

    run_parser.set_defaults(handler=partial(Corilla.process_cli_commands,
                                            subparser=run_parser))

    apply_parser = subparsers.add_parser('apply',
                              help='correct images for illumination')

    apply_parser.add_argument('project_dir', nargs='?', default=os.getcwd(),
                              help='path to project directory')

    apply_parser.add_argument('--channel', dest='channels', nargs='+',
                              type=int,
                              help='number(s) of channels to process')

    apply_parser.add_argument('--site', dest='sites', nargs='+', type=int,
                              help='number(s) of sites to process')

    apply_parser.add_argument('-o', '--output_dir', dest='output_dir',
                              type=str, required=True,
                              help='path to output directory')

    apply_parser.add_argument('-c', '--config', dest='config',
                              help='path to custom yaml configuration file \
                                    (defaults to "tmt" configuration)')

    apply_parser.set_defaults(handler=partial(Corilla.process_cli_commands,
                              subparser=apply_parser))

    submit_parser = subparsers.add_parser('submit',
                               help='submit statistics calculation')

    submit_parser.add_argument('project_dir', nargs='?',
                               default=os.getcwd(),
                               help='path to project directory')

    submit_parser.add_argument('-c', '--config', dest='config',
                               help='use custom yaml configuration file \
                                     (defaults to "tmt" configuration)')

    submit_parser.set_defaults(handler=partial(Corilla.process_cli_commands,
                               subparser=submit_parser))

    args = parser.parse_args()

    if not os.path.exists(args.project_dir):
        raise IOError('Project directory does not exist: "%s"'
                      % args.project_dir)

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = tmt.util.load_config(args.config)
        print '. Checking configuration file'
        tmt.util.check_config(args.config)
    else:
        args.config = tmt.config

    try:
        if args.handler:
            args.handler(args)
            print 'üç∫  Done!'
        else:
            parser.print_help()
    except Exception as error:
        sys.stdout.write('Failed. ')
        print 'Error message: "%s"\n' % str(error)
        for tb in traceback.format_tb(sys.exc_info()[2]):
            print tb
