#! /usr/bin/env python
# encoding: utf-8
import os
import argparse
import sys
from functools import partial
import tmt.visi
import traceback
import tmt.util
import tmt.visi
import tmt.visi.util
from tmt.visi.api import Visi


if __name__ == '__main__':

    print tmt.visi.logo % {'version': tmt.visi.__version__}

    parser = argparse.ArgumentParser(
            description='''Command line tool for the conversion of .stk files
                         to .png with optional renaming.
                         Files will be written into a separate folder sibling
                         to the input "stk_folder".'''
    )

    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + tmt.visi.__version__,
                        help='Display version')

    subparsers = parser.add_subparsers()

    run_parser = subparsers.add_parser('run',
                            help='run conversion from .stk to .png')

    run_parser.add_argument('stk_folder',
                            nargs='?', type=str, default=os.getcwd(),
                            help='path to folder holding .stk files \
                                  (defaults to cwd)')

    run_parser.add_argument('-w', '--wildcards', dest='wildcards',
                            type=str, default='*',
                            help='wildcards (globbing patterns) \
                                  to select subset of files in folder')

    run_parser.add_argument('-j', '--job', dest='job', type=int,
                            help='id of the job to process (integer)')

    run_parser.add_argument('-s', '--split_output', dest='split_output',
                            action='store_true', default=False,
                            help='place output files for each .nd file \
                                  into separate folders')

    run_parser.add_argument('-z', '--zstacks', dest='zstacks',
                            action='store_true', default=False,
                            help='keep z-stacks')

    run_parser.add_argument('-r', '--rename', dest='rename',
                            action='store_true', default=False,
                            help='rename files according to configuration')

    run_parser.add_argument('--visi_config', dest='visi_config',
                            help='use custom yaml configuration file \
                                  (defaults to "visi" configuration)')

    run_parser.add_argument('-c', '--config', dest='config',
                            help='use custom yaml configuration file \
                                  (defaults to "tmt" configuration)')

    run_parser.set_defaults(handler=partial(Visi.process_cli_commands,
                                            subparser=run_parser))

    joblist_parser = subparsers.add_parser('joblist',
                                help='create a joblist for parallel computing \
                                      (.joblist YAML file in parent directory \
                                       of "stk_folder")')

    joblist_parser.add_argument('stk_folder',
                                nargs='?', type=str, default=os.getcwd(),
                                help='path to folder holding .stk files \
                                      (defaults to cwd)')

    joblist_parser.add_argument('-w', '--wildcards', dest='wildcards',
                                type=str, default='*',
                                help='wildcards (globbing patterns) \
                                      to select subset of files in folder')

    joblist_parser.add_argument('-r', '--rename', dest='rename',
                                action='store_true', default=False,
                                help='rename files according to configuration')

    joblist_parser.add_argument('-s', '--split_output', dest='split_output',
                                action='store_true', default=False,
                                help='place output files for each .nd file \
                                      into separate folders')

    joblist_parser.add_argument('-b', '--batch_size', dest='batch_size',
                                type=int, default=10,
                                help='number of files that should be \
                                      processed per job (defaults to 10)')

    joblist_parser.add_argument('-c', '--config', dest='config',
                                help='use custom yaml configuration file \
                                (defaults to "tmt" configuration)')

    joblist_parser.set_defaults(handler=partial(Visi.process_cli_commands,
                                                subparser=joblist_parser))

    submit_parser = subparsers.add_parser('submit',
                                          help='run on cluster')

    submit_parser.add_argument('stk_folder',
                               nargs='?', type=str, default=os.getcwd(),
                               help='path to folder holding .stk files \
                                     (defaults to cwd)')

    submit_parser.add_argument('--no_shared_network', dest='shared_network',
                               action='store_false', default=True,
                               help='in case worker nodes don\'t have access \
                                     to a shared network')

    submit_parser.add_argument('-c', '--config', dest='config',
                               help='use custom yaml configuration file \
                                     (defaults to "tmt" configuration)')

    submit_parser.set_defaults(handler=partial(Visi.process_cli_commands,
                               subparser=submit_parser))

    args = parser.parse_args()

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = tmt.util.load_config(args.config)
        tmt.util.check_config(args.config)
    else:
        args.config = tmt.config

    if 'visi_config' in args:
        if args.visi_config:
            # Overwrite default "visi" configuration
            print '. Using configuration file "%s"' % args.visi_config
            args.config_file = args.config.copy()
            visi_configuration = tmt.util.load_config(args.visi_config)
            print '. Checking configuration file'
            tmt.visi.util.check_visi_config(visi_configuration)
        else:
            visi_configuration = tmt.visi.config
            args.config_file = ''
    else:
        visi_configuration = tmt.visi.config
        args.config_file = ''

    # Add "visi" to "tmt" configuration
    args.config.update(visi_configuration)

    try:
        if args.handler:
            args.handler(args)
            print 'üç∫  Done!'
        else:
            parser.print_help()
    except Exception as error:
        sys.stdout.write('Failed. ')
        print 'Error message: "%s"\n' % str(error)
        for tb in traceback.format_tb(sys.exc_info()[2]):
            print tb
