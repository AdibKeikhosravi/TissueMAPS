import os
from .. import text_readers


class ClusterWorkflowManager(object):

    '''
    Class for reading workflow descriptions from a YAML file.
    '''

    def __init__(self, experiment_dir):
        '''
        Initialize an instance of class ClusterWorkflowManager.

        Parameters
        ----------
        experiment_dir: str
            path to an experiment directory

        Returns
        -------
        ClusterWorkflowManager
        '''
        self.experiment_dir = os.path.expandvars(experiment_dir)
        self.experiment_dir = os.path.expanduser(self.experiment_dir)
        self.experiment_dir = os.path.abspath(self.experiment_dir)

    @property
    def workflow_file_name(self):
        '''
        Returns
        -------
        str
            absolute path to the *.workflow* file

        Note
        ----
        The file is located in the root directory of the experiment folder.
        '''
        self._workflow_file_name = os.path.join(
                self.experiment_dir,
                '%s.workflow' % os.path.basename(self.experiment_dir))
        return self._workflow_file_name

    @property
    def workflow_description(self):
        '''
        Returns
        -------
        dict
            description of the workflow read from YAML
        '''
        self._workflow_description = text_readers.read_yaml(self.workflow_file_name)
        for i, step in enumerate(self._workflow_description['steps']):
            self._workflow_description['steps'][i]['prog_args'] = \
                self.format_args(step['prog_args']) + \
                ['-v' for x in xrange(self._workflow_description['verbosity'])]
            self._workflow_description['steps'][i]['init_args'] = \
                self.format_args(step['init_args'])
        return self._workflow_description

    @staticmethod
    def format_args(args):
        '''
        Format arguments as generated by an `argparse.ArgumentParser` instance.

        Parameters
        ----------
        dict
            arguments as key-value pairs, where key is the name of the argument
            and the value the corresponding value of the argument:
            ``{"foo": "bla", "bar": 2}``

        Returns
        -------
        List[str]
            arguments in the format ``["--foo", "bla", "--bar", "2"]``
        '''
        if args:
            arg_list = utils.flatten([
                ['--%s' % k, str(v)]
                for k, v in args.iteritems()
            ])
        else:
            arg_list = list()
        return arg_list

