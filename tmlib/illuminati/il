#! /usr/bin/env python
# encoding: utf-8
import sys
from functools import partial
import argparse
import tmt
import traceback
from tmt.illuminati.api import Illuminati


if __name__ == '__main__':

    print tmt.illuminati.logo % {'version': tmt.illuminati.__version__}

    parser = argparse.ArgumentParser(
        description='Create pyramid images for TissueMAPS.')

    subparsers = parser.add_subparsers()

    channel_parser = subparsers.add_parser('channel',
                                help='create pyramid for "channel" layer')

    channel_parser.add_argument('project_dir', type=str,
                                help='path to project directory')

    channel_parser.add_argument('-n', dest='channel_nr', type=int,
                                help='number of channel to process')

    channel_parser.add_argument('-s', '--shift', dest='shift',
                                action='store_true', default=False,
                                help='shift stitched image')

    channel_parser.add_argument('-i', '--illum_correct', dest='illum_correct',
                                action='store_true', default=False,
                                help='correct images for illumination\
                                      according to stats file')

    channel_parser.add_argument('-t', '--thresh', dest='thresh',
                                action='store_true', default=False,
                                help='rescale stitched image between min \
                                      value and a threshold level')
    channel_parser.add_argument('--thresh_value', dest='thresh_value',
                                type=float, default=None,
                                help='fixed pixel value for threshold')
    channel_parser.add_argument('--thresh_percent', dest='thresh_percent',
                                type=float, default=9.99,
                                help='percentile of pixel values above \
                                      threshold (defaults to 99.99)')
    channel_parser.add_argument('--thresh_sample', dest='thresh_sample',
                                type=int, default=10,
                                help='number of args.files to use for \
                                      threshold estimation (defaults to 10')

    channel_parser.add_argument('--stitch_only', dest='stitch_only',
                                action='store_true', default=False,
                                help='if the stitched image should be saved \
                                      without pyramid creation')

    channel_parser.add_argument('-o', '--output', dest='output_dir',
                                help='directory where output should be saved')

    channel_parser.add_argument('-l', '--layer_name', dest='layer_name',
                                type=str, help='name of the layer')

    channel_parser.add_argument('-c', '--config', dest='config',
                                help='path to custom yaml configuration file \
                                      (defaults to "tmt" configuration)')

    channel_parser.set_defaults(handler=partial(Illuminati.process_cli_commands,
                                                subparser=channel_parser))

    mask_parser = subparsers.add_parser('mask',
                             help='create pyramid for "mask" layer')

    mask_parser.add_argument('project_dir', type=str,
                             help='path to project directory')

    mask_parser.add_argument('-n', dest='objects_name', type=int,
                             help='name of objects to process (e.g. "cells")')

    mask_parser.add_argument('-s', '--shift', dest='shift',
                             action='store_true', default=False,
                             help='shift stitched image')

    mask_parser.add_argument('--stitch_only', dest='stitch_only',
                             action='store_true', default=False,
                             help='if the stitched image should be saved \
                                   without pyramid creation')

    mask_parser.add_argument('-o', '--output', dest='output_dir',
                             help='directory where output should be saved')

    mask_parser.add_argument('-l', '--layer_name', dest='layer_name',
                             type=str, help='name of the layer')

    mask_parser.add_argument('-c', '--config', dest='config',
                             help='path to custom yaml configuration file \
                                   (defaults to "tmt" configuration)')

    mask_parser.add_argument('-m', dest='mask', type=str, default='outline',
                             help='type of mask that should be created, \
                                   "area" or "outline" (default)')

    mask_parser.add_argument('-g', '--global_ids', dest='global_ids',
                             action='store_true', default=False,
                             help='if cell labels should be converted into \
                                   globally unique labels')
    mask_parser.add_argument('--png', dest='png',
                             action='store_true', default=False,
                             help='save pyramid tiles as png (default is jpg)')
    mask_parser.add_argument('--no_rescale', dest='no_rescale',
                             action='store_true', default=False,
                             help='no 16bit -> 8bit rescaling')

    mask_parser.set_defaults(handler=partial(Illuminati.process_cli_commands,
                                             subparser=mask_parser))

    lut_parser = subparsers.add_parser('lut',
                            help='create id lookup tables')

    lut_parser.add_argument('project_dir', type=str,
                            help='path to project directory')

    lut_parser.add_argument('-n', dest='objects_name', type=int,
                            help='name of objects to process (e.g. "cells")')

    lut_parser.add_argument('-c', '--config', dest='config',
                            help='path to custom yaml configuration file \
                                  (defaults to "tmt" configuration)')

    lut_parser.set_defaults(handler=partial(Illuminati.process_cli_commands,
                                            subparser=lut_parser))

    args = parser.parse_args()

    if args.stitch_only and not args.output_dir:
        raise Exception('The `--stich_only` argument is only valid together '
                        'with the `--output` argument, because you need to '
                        'explicitly provide an output directory.')

    if args.config:
        # Overwrite default "tmt" configuration
        print '. Using configuration file "%s"' % args.config
        args.config = tmt.utils.load_config(args.config)
        print '. Checking configuration file'
        tmt.utils.check_config(args.config)
    else:
        args.config = tmt.config

    try:
        if args.handler:
            args.handler(args)
            print 'üç∫  Done!'
        else:
            parser.print_help()
    except Exception as error:
        sys.stdout.write('Failed. ')
        print 'Error message: "%s"\n' % str(error)
        for tb in traceback.format_tb(sys.exc_info()[2]):
            print tb
