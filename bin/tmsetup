#!/usr/bin/env python
import os
import argparse
import subprocess
import sys

from tmsetup.description import load_setup


def run(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    for c in iter(lambda: process.stdout.read(1), ''):
        sys.stdout.write(c)


def main(args):
    verbosity = '-%s' % (args.verbosity * 'v')
    inventory_file = os.path.abspath(
        os.path.join(__file__, '..', 'inventory.py')
    )
    # TODO: let inventory save playbook locations into file
    import ipdb; ipdb.set_trace()
    variables = str()
    if args.mode == 'manage':
        playbook_file = os.path.abspath(
            os.path.join(__file__, '..', 'playbooks', 'instances.yml')
        )
        if args.launch:
            variables = 'instance_state=present'
        elif args.terminate:
            variables = 'instance_state=absent'
        elif args.start:
            # TODO: dependent on cloud provider
            # ec2: started
            # gce: running
            # os: -
            raise ValueError('Starting VMs is not yet supported')
            # variables = 'instance_state=running'
        elif args.stop:
            # TODO: dependent on cloud provider
            # ec2: stopped
            # gce: stopped
            # os: -
            raise ValueError('Stopping VMs is not yet supported')
            # variables = 'instance_state=stopped'
        # TODO: limit
    else:
        playbook_file = ''
    command = [
        'ansible-playbook',
        verbosity,
        '-i', inventory_file,
        playbook_file,
    ]
    if variables:
        command.extend(['-e', variables])
    if args.host is not None:
        # TODO: check if host exists
        command.extend(['--limit', args.host])
    if args.cluster is not None:
        # TODO: retrieve hosts from setup
        hosts = ''
        command.extend(['--limit', hosts])
    if getattr(args, 'group', None) is not None:
        # TODO: retrieve hosts from setup
        hosts = ''
        command.extend(['--limit', args.group])

    # run(command)


if __name__ == '__main__':

    def check_dependency(arg):
        class ArgumentDependency(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if getattr(namespace, arg) is None:
                    parser.error(
                        'Argument "--%s" also requires "--%s".' % (
                            self.dest, arg
                        )
                    )
                else:
                    setattr(namespace, self.dest, values)
        return ArgumentDependency

    parser = argparse.ArgumentParser(
        description='Setup TissueMAPS on Ubuntu.'
    )
    parser.add_argument(
        '--verbosity', '-v', action='count', default=0,
        help='increase logging verbosity'
    )

    subparsers = parser.add_subparsers(dest='mode', help='mode')
    subparsers.required = True

    manage_subparser = subparsers.add_parser(
        'manage',
        help='manage virtual machine (VM) instances'
    )
    manage_subparser.set_defaults(method='manage')

    action_group = manage_subparser.add_argument_group('actions')
    action_group = action_group.add_mutually_exclusive_group(required=True)
    action_group.add_argument(
        '--launch', action='store_true',
        help='launch VMs'
    )
    action_group.add_argument(
        '--terminate', action='store_true',
        help='terminate VMs'
    )
    action_group.add_argument(
        '--start', action='store_true',
        help='start VMs'
    )
    action_group.add_argument(
        '--stop', action='store_true',
        help='stop VMs'
    )

    manage_target_group = manage_subparser.add_mutually_exclusive_group()
    manage_target_group.add_argument(
        '--host', metavar='HOST_NAME', type=str,
        help='limit action to single VM instance'
    )
    manage_target_group.add_argument(
        '--cluster', metavar='CLUSTER_NAME', type=str,
        help='limit action to VM instances of a single cluster'
    )
    manage_subparser.add_argument(
        '--category', dest='category', type=str,
        action=check_dependency('cluster'),
        help='limit action to VM instances of a single cluster category'
    )

    deploy_subparser = subparsers.add_parser(
        'deploy',
        help='deploy application on virtual machine (VM) instances'
    )
    deploy_subparser.set_defaults(method='deploy')

    deploy_target_group = deploy_subparser.add_mutually_exclusive_group()
    deploy_target_group.add_argument(
        '--host', metavar='HOST_NAME', type=str,
        help='limit action to single VM instance'
    )
    deploy_target_group.add_argument(
        '--cluster', metavar='CLUSTER_NAME', type=str,
        help='limit action to VM instances of a single cluster'
    )
    deploy_target_group.add_argument(
        '--group', metavar='GROUP_NAME', type=str,
        help='limit action to VM instances of an Ansible group'
    )
    deploy_subparser.add_argument(
        '--category', dest='category', type=str,
        action=check_dependency('cluster'),
        help='limit action to VM instances of a single cluster category'
    )


    args = parser.parse_args()
    main(args)
