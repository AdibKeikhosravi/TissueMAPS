#!/usr/bin/env python
import argparse
import sqlalchemy.orm.exc

import tmlib.models as tm


def add_acquisition(experiment_name, plate_name, acquisition_name):
    with tm.utils.MainSession() as session:
        try:
            experiment = session.query(tm.ExperimentReference).\
                filter_by(name=experiment_name).\
                one()
            experiment_id = experiment.id
        except sqlalchemy.orm.exc.NoResultFound:
            raise ValueError(
                'Experiment "%s" does not exist!' % experiment_name
            )
        except:
            raise

    with tm.utils.ExperimentSession(experiment_id) as session:
        try:
            plate = session.query(tm.Plate).\
                filter_by(name=plate_name).\
                one()
        except sqlalchemy.orm.exc.NoResultFound:
            raise ValueError(
                'Plate "%s" does not exist for experiment "%s"!'
                % (plate_name, experiment_name)
            )
        except:
            raise
        acquisition = session.get_or_create(
            tm.Acquisition, name=acquisition_name, plate_id=plate.id
        )
        return acquisition.id


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='''
            Add a new acquisition to an existing plate
            in the TissueMAPS database.
        '''
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True,
        help='name of the parent experiment'
    )
    parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the parent plate'
    )
    parser.add_argument(
        '-a', '--acquisition_name', required=True,
        help='name of the new acquisition'
    )

    args = parser.parse_args()

    acquisition_id = add_acquisition(
        args.experiment_name, args.plate_name, args.acquisition_name
    )

    print 'ACQUISITION ID: %d' % acquisition_id
