#!/usr/bin/env python
import json
import logging
import argparse
import subprocess

from tmlib.logging_utils import configure_logging, map_logging_verbosity

from tmlib.tools import SUPPORTED_TOOLS
from tmlib.tools import get_tool_class

def load_request_payload(batch_location):
    with open(batch_location) as f:
        return json.load(f)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.description = '''
        TissueMAPS command line interface for asynchronous processing of
        client tool requests.
    '''
    parser.add_argument(
        'experiment_id', type=int,
        help='ID of the experiment that should be processed'
    )
    parser.add_argument(
        '--verbosity', '-v', action='count', default=0,
        help='increase logging verbosity'
    )
    parser.add_argument(
        '--name', '-n', required=True,
        choices=SUPPORTED_TOOLS, help='name of the tool'
    )
    parser.add_argument(
        '--submission_id', '-s', type=int, required=True,
        help='ID of the corresponding tool job submission'
    )
    parser.add_argument(
        '--batch_file', '-b', required=True,
        help='absolute path to the file on disk where job payload was stored'
    )

    args = parser.parse_args()

    configure_logging()
    level = map_logging_verbosity(args.verbosity)
    lib_logger = logging.getLogger('tmlib')
    lib_logger.setLevel(level)
    tool_logger = logging.getLogger('tmlib.tools')
    tool_logger.setLevel(level)
    tool_logger.debug('processing on node: %s', socket.gethostname())

    Tool = get_tool_class(args.name)
    tool = Tool(args.experiment_id, args.submission_id)
    payload = load_request_payload(args.batch_file)
    tool.process_request(payload)


