#!/usr/bin/env python
'''Command line tool for downloading files from TissueMAPS.'''
import os
import logging
import argparse

from tmclient import TmClient
from tmclient.log import configure_logging
from tmclient.log import map_logging_verbosity

logger = logging.getLogger(__name__)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Download files from TissueMAPS.'
    )
    parser.add_argument(
        '-H', '--host', required=True,
        help='host name of TissueMAPS instance'
    )
    parser.add_argument(
        '-P', '--port', type=int, default=80,
        help='number of the port to which the TissueMAPS server listens'
    )
    parser.add_argument(
        '-u', '--user_name', required=True,
        help='name of TissueMAPS user'
    )
    parser.add_argument(
        '-p', '--password',
        help='password of TissueMAPS user'
    )
    parser.add_argument(
        '-v', '--verbosity', action='count', default=0,
        help='increase logging verbosity (no logging by default)'
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True,
        help='name of the parent experiment'
    )
    parser.add_argument(
        '-d', '--directory',
        help='path to directory where files should be downloaded to'
    )

    subparsers = parser.add_subparsers(dest='file_type', help='file type')
    subparsers.required = True

    channel_image_parser = subparsers.add_parser(
        'channel_image', help='download channel image'
    )
    channel_image_parser.set_defaults(method='download_channel_image_file')
    channel_image_parser.add_argument(
        '-c', '--channel_name', required=True,
        help='name of the channel'
    )
    channel_image_parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the plate'
    )
    channel_image_parser.add_argument(
        '-w', '--well_name', required=True,
        help='name of the well'
    )
    channel_image_parser.add_argument(
        '-x', '--well_pos_x', required=True,
        help='zero-based x cooridinate of the acquisition site within the well'
    )
    channel_image_parser.add_argument(
        '-y', '--well_pos_y', required=True,
        help='zero-based y cooridinate of the acquisition site within the well'
    )
    channel_image_parser.add_argument(
        '--correct', action='store_true',
        help='whether image should be corrected for illumination artifacts'
    )
    channel_image_parser.add_argument(
        '-i', '--cycle_index', default=0,
        help='zero-based index of the cycle (default: 0)'
    )
    channel_image_parser.add_argument(
        '-z', '--zplane', default=0,
        help='zero-based z-plane index (default: 0)'
    )
    channel_image_parser.add_argument(
        '-t', '--tpoint', default=0,
        help='zero-based time point index (default: 0)'
    )

    segmentation_image_parser = subparsers.add_parser(
        'segmentation_image', help='download segmented objects as label image'
    )
    segmentation_image_parser.set_defaults(
        method='download_segmentation_image_file'
    )
    segmentation_image_parser.add_argument(
        '-o', '--object_type', required=True,
        help='type of the segmented objects (e.g. Cells)'
    )
    segmentation_image_parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the plate'
    )
    segmentation_image_parser.add_argument(
        '-w', '--well_name', required=True,
        help='name of the well'
    )
    segmentation_image_parser.add_argument(
        '-x', '--well_pos_x', required=True,
        help='zero-based x cooridinate of the acquisition site within the well'
    )
    segmentation_image_parser.add_argument(
        '-y', '--well_pos_y', required=True,
        help='zero-based y cooridinate of the acquisition site within the well'
    )
    segmentation_image_parser.add_argument(
        '-z', '--zplane', default=0,
        help='zero-based z-plane index (default: 0)'
    )
    segmentation_image_parser.add_argument(
        '-t', '--tpoint', default=0,
        help='zero-based time point index (default: 0)'
    )

    feature_value_parser = subparsers.add_parser(
        'feature_values', help='download object feature values'
    )
    feature_value_parser.set_defaults(method='download_object_feature_values_file')
    feature_value_parser.add_argument(
        '-o', '--object_type', required=True,
        help='type of the segmented objects (e.g. Cells)'
    )

    metadata_parser = subparsers.add_parser(
        'metadata', help='download object metadata'
    )
    metadata_parser.set_defaults(method='download_object_metadata_file')
    metadata_parser.add_argument(
        '-o', '--object_type', required=True,
        help='type of the segmented objects (e.g. Cells)'
    )
    args = parser.parse_args()

    configure_logging()
    logging_level = map_logging_verbosity(args.verbosity)
    logger = logging.getLogger('tmclient')
    logger.setLevel(logging_level)

    service = TmClient(
        args.host, args.port, args.experiment_name,
        args.user_name, args.password
    )
    service(args)
