#!/usr/bin/env python
'''Command line tool for registration of experiment data in the TissueMAPS
database.
'''
import os
import logging
import argparse

from tmclient import TmClient
from tmclient.log import configure_logging
from tmclient.log import map_logging_verbosity

logger = logging.getLogger(__name__)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Register experiment data in the TissueMAPS database.'
    )
    parser.add_argument(
        '-H', '--host', required=True,
        help='name of TissueMAPS host'
    )
    parser.add_argument(
        '-P', '--port', type=int, default=80,
        help='number of the port to which the TissueMAPS server listens'
    )
    parser.add_argument(
        '-u', '--user_name', required=True,
        help='name of TissueMAPS user'
    )
    parser.add_argument(
        '-p', '--password',
        help='password of TissueMAPS user'
    )
    parser.add_argument(
        '-v', '--verbosity', action='count', default=0,
        help='increase logging verbosity (no logging by default)'
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True,
        help='name of the parent experiment'
    )

    subparsers = parser.add_subparsers(dest='data_type', help='data type')
    subparsers.required = True

    experiment_parser = subparsers.add_parser(
        'experiment', help='create a new experiment'
    )
    experiment_parser.set_defaults(method='create_experiment')
    experiment_parser.add_argument(
        '--microscope_type', '-m', default='cellvoyager',
        help='microscope type (default: cellvoyager)'
    )
    experiment_parser.add_argument(
        '--plate_format', '-f', type=int, default=384,
        help='''
            well-plate format - total number of wells per plate (default: 384)
        '''
    )
    experiment_parser.add_argument(
        '--plate_acquisition_mode', default='basic',
        help='''
            whether multiple acquisitions of the same plate are interpreted
            as time points (basic mode) or multiplexing cycles
            (multiplexing mode) (default: basic)
        '''
    )

    plate_parser = subparsers.add_parser(
        'plate', help='create a new plate'
    )
    plate_parser.set_defaults(method='create_plate')
    plate_parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the plate that should be created'
    )

    acquisition_parser = subparsers.add_parser(
        'acquisition', help='create a new acquisition for an existing plate'
    )
    acquisition_parser.set_defaults(method='create_acquisition')
    acquisition_parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the parent plate'
    )
    acquisition_parser.add_argument(
        '-a', '--acquisition_name', required=True,
        help='name of the acquisition that should be created'
    )

    args = parser.parse_args()

    configure_logging()
    logging_level = map_logging_verbosity(args.verbosity)
    logging.getLogger('tmclient').setLevel(logging_level)
    logger.setLevel(logging_level)

    service = TmClient(
        args.host, args.port, args.experiment_name,
        args.user_name, args.password
    )

    service(args)
