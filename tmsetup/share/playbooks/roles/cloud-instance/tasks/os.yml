# TmSetup - Automated setup and deployment of TissueMAPS in the cloud.
# Copyright (C) 2016  Markus D. Herrmann, University of Zurich

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

---
# Playbook for creating a virtual machine instance on OpenStack (OS).
#
# Requires the following environment variables:
#  - OS_AUTH_URL
#  - OS_USERNAME
#  - OS_PASSWORD
#  - OS_PROJECT_NAME
- name: "{{ (instance_state == 'present') | ternary('Create','Remove') }} instance"
  local_action: os_server
  args:
    name: "{{ instance_name }}"
    state: "{{ instance_state }}"
    key_name: "{{ key_name }}"
    security_groups: "{{ security_groups }}"
    image: "{{ image }}"
    flavor: "{{ flavor }}"
    auto_ip: "{{ assign_public_ip }}"
    wait: yes
    timeout: 300
    boot_from_volume: "{{ disk_size is defined }}"
    volume_size: "{{ disk_size|default(100) }}"
    terminate_volume: yes
    network: "{{ network }}"
    region_name: "{{ region }}"
  register: instance

- name: Register host IP address
  set_fact:
    ansible_host: "{{ instance.openstack.public_v4 if assign_public_ip else instance.openstack.private_v4 }}"
  when: instance_state == 'present'

- name: "{{ (instance_state == 'present') | ternary('Create','Remove') }} storage volume"
  local_action: os_volume
  args:
    display_name: "{{ volume_name }}"
    state: "{{ instance_state }}"
    volume_type: default
    wait: yes
    timeout: 300
    size: "{{ volume_size }}"
    region_name: "{{ region }}"
  register: volume
  when: volume_size is defined

- name: Attach storage volume to instance
  local_action: os_server_volume
  args:
    state: "{{ instance_state }}"
    server: "{{ instance_name }}"
    volume: "{{ volume_name }}"
    device: "{{ volume_device_mapping[provider] }}"
    wait: yes
    timeout: 300
  when: (volume_size is defined) and (instance_state == 'present')

- name: Unregister host
  set_fact:
    ansible_host: null
  when: instance_state == 'absent'
