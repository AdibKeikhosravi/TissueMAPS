#!/usr/bin/env python
# encoding: utf-8
import yaml
import re

from tmlib.models.utils import Session


def insertdata(yaml_file):
    '''Insert records encoded in a YAML file into the database.

    Note that this command has to be run after all required tables have been
    added into the database.

    The YAML file encoding these records has to have a specific structure.
    As an example, the following file would be used to insert an experiment
    with one channel and one channel layer (text prefixed with a hash are
    comments and should not be present in the final file).


        records:
            # the full path that python can use to import the class
            - class: tmaps.experiment.Experiment
              # arguments for the model constructor
              args:
                  name: 150820-Testset-CV
                  description: Very nice exp
                  # lookup syntax, see below for more information
                  user_id: //tmaps.user.User[name="testuser"]@id
                  microscope_type: visiview
                  plate_format: 96
                  root_directory: /some/path/to/expdata/
                  plate_acquisition_mode: multiplexing
            - class: tmaps.experiment.Channel
              args:
                  name: channel_01
                  index: 1
                  # link this channel to the experiment inserted previously
                  experiment_id: //tmaps.experiment.Experiment[id=1]@id
            - class: tmaps.experiment.ChannelLayer
              args:
                  channel_id: //tmaps.experiment.Channel[name="channel_01"]@id
                  zplane: 0
                  tpoint: 0

    A special syntax can be used to refer to other previously inserted objects.
    Such strings are prefixed with two forward slashes.
    For example:

      marker                       comma-separated key-value pairs used for lookup
        vv                         vvvvvvvvvvvvvvvvv 
        //tmaps.experiment.Channel[name="channel_01"]@id
          ^^^^^^^^^^^^^^^^^^^^^^^^                    ^^
          full path to model class                    select the 'id' attribute

    Note that each query is assumed to return only one object. In case multiple objects
    are found only the first is considered.

    Arguments
    ---------
    yaml_file : str
        The path to the yaml file that encodes the records to be inserted.

    '''
    def import_from_str(name):
        components = name.split('.')
        mod = __import__(components[0])
        for comp in components[1:]:
            mod = getattr(mod, comp)
        return mod

    if yaml_file is None or yaml_file == '':
        print 'No yaml_file supplied, will not insert any data. '
        return

    def get_value_for_query_string(query, session):
        '''Interpret strings of the form

            //tmaps.experiment.Channel[name="channel_01"]@id

        and return the queried object or an attribute thereof.

        '''
        m = re.match(
            r'//(?P<model>.*)\[(?P<lookup>.*)\](@(?P<property>\w+))?', query)
        model = import_from_str(m.group('model'))
        lookup = m.group('lookup')
        lookup_props = {}
        for k, v in re.findall(r'(?P<key>\w+)=(?P<value>"\w+"|\d+)', lookup):
            valmatch = re.match('"(\w+)"', v)
            if valmatch:
                lookup_props[k] = valmatch.group(1)
            else:
                lookup_props[k] = int(v)
        obj = session.query(model).filter_by(**lookup_props).first()
        prop = m.group('property')
        if prop:
            return getattr(obj, prop)
        else:
            return obj

    with open(yaml_file, 'r') as f:
        sample_data = yaml.load(f)

        for rec in sample_data['records']:
            class_name = rec['class']
            constr_args = rec['args']
            model_constr = import_from_str(class_name)

            # Check if there are objects that have to be looked up in the
            # database before creating new database records.
            for k, v in constr_args.items():
                if type(v) is str and v.startswith('//'):
                    with Session() as session:
                        val = get_value_for_query_string(v, session)
                    constr_args[k] = val
                else:
                    constr_args[k] = v
            obj = model_constr(**constr_args)

            print '* Inserting new object of class "%s" with properties:' \
                % class_name
            for k, v in constr_args.items():
                print '\t%s: %s' % (k, str(v))

            with Session() as session:
                session.add(obj)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(
        description='Utility to insert records into the database.')
    parser.add_argument(
        'yaml', help=(
            'The path to the YAML file that holds the encoded records'))
    args = parser.parse_args()

    insertdata(args.yaml)
