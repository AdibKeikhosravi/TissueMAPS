import os
import cv2
import logging
import numpy as np
from sqlalchemy import Column, String, Integer, Text, Boolean, ForeignKey
from sqlalchemy.dialects.postgres import JSONB
from sqlalchemy.orm import relationship
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy import UniqueConstraint

from tmlib.utils import assert_type
from tmlib.utils import notimplemented
from tmlib.image import ChannelImage
from tmlib.image import PyramidTile
from tmlib.image import IllumstatsImage
from tmlib.image import IllumstatsContainer
from tmlib.metadata import ChannelImageMetadata
from tmlib.metadata import PyramidTileMetadata
from tmlib.metadata import IllumstatsImageMetadata
from tmlib.readers import DatasetReader
from tmlib.readers import PixelsReader
from tmlib.writers import DatasetWriter
from tmlib.writers import PixelsWriter
from tmlib.models import File, DateMixIn
from tmlib.models.status import FileUploadStatus

logger = logging.getLogger(__name__)


class MicroscopeImageFile(File, DateMixIn):

    '''Image file that was generated by the microscope.
    The file format differs between microscope types and may be vendor specific.

    Attributes
    ----------
    name: str
        name of the file
    omexml: lxml.etree._Element
        OMEXML metadata
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.acquisition.Acquisition
        parent acquisition to which the file belongs
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'microscope_image_files'

    __table_args__ = (UniqueConstraint('name', 'acquisition_id'), )

    # Table columns
    name = Column(String, index=True)
    omexml = Column(Text)
    upload_status = Column(String, index=True)
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    # Relationships to other tables
    acquisition = relationship('Acquisition', backref='microscope_image_files')

    def __init__(self, name, acquisition_id):
        '''
        Parameters
        ----------
        name: str
            name of the microscope image file
        acquisition_id: int
            ID of the parent acquisition
        '''
        self.name = name
        self.acquisition_id = acquisition_id
        self.upload_status = FileUploadStatus.WAITING

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(
            self.acquisition.microscope_images_location, self.name
        )

    @notimplemented
    def get(self):
        pass

    @notimplemented
    def put(self, data):
        pass

    def as_dict(self):
        '''
        Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name,
            'upload_status': self.upload_status
        }

    def __repr__(self):
        return '<MicroscopeImageFile(id=%r, name=%r)>' % (self.id, self.name)


class MicroscopeMetadataFile(File, DateMixIn):

    '''Metadata file that was generated by the microscope.
    The file format differs between microscope types and may be vendor specific.

    Attributes
    ----------
    name: str
        name of the file
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.acquisition.Acquisition
        parent acquisition to which the file belongs
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'microscope_metadata_files'

    __table_args__ = (UniqueConstraint('name', 'acquisition_id'), )

    # Table columns
    name = Column(String, index=True)
    upload_status = Column(String, index=True)
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    # Relationships to other tables
    acquisition = relationship('Acquisition', backref='microscope_metadata_files')

    def __init__(self, name, acquisition_id):
        '''
        Parameters
        ----------
        name: str
            name of the file
        acquisition_id: int
            ID of the parent acquisition
        '''
        self.name = name
        self.acquisition_id = acquisition_id
        self.upload_status = FileUploadStatus.WAITING

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(
            self.acquisition.microscope_metadata_location, self.name
        )

    @notimplemented
    def get(self):
        pass

    @notimplemented
    def put(self, data):
        pass

    def as_dict(self):
        '''
        Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name,
            'upload_status': self.upload_status
        }

    def __repr__(self):
        return '<MicroscopeMetdataFile(id=%r, name=%r)>' % (self.id, self.name)


class ChannelImageFile(File, DateMixIn):

    '''A *channel image file* holds a single 2D pixels plane that was extracted
    from a microscope image file. It represents a unique combination of
    time point, site, channel, and z-plane.

    Attributes
    ----------
    tpoint: int
        zero-based time point index in the time series
    zplane: int
        zero-based z-plane index of the focal plane within the three
        dimensional stack (projected images have only a single z-plane
        with index zero)
    wavelength: str
        name of the wavelength
    file_map: str
        binary JSON string encoding a mapping of the channel image file
        to its source microscope image file
    omitted: bool
        whether the image file is considered empty, i.e. consisting only of
        background pixels without having biologically relevant information
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.models.Acquisition
        parent layer to which the image file belongs
    site_id: int
        ID of the parent site
    site: tmlib.models.Site
        parent site to which the image file belongs
    cycle_id: int
        ID of the parent cycle
    cycle: tmlib.models.Cycle
        parent cycle to which the image file belongs
    channel_layer_id: int
        ID of the parent channel layer
    channel_layer: tmlib.models.ChannelLayer
        parent layer to which the image file belongs
    pixels: tmlib.models.ChannelImagePixels
        the actual binary pixel data
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'channel_image_files'

    __table_args__ = (
        UniqueConstraint('tpoint', 'zplane', 'site_id', 'cycle_id', 'wavelength'), 
    )

    # Table columns
    _name = Column('name', String, index=True)
    tpoint = Column(Integer, index=True)
    zplane = Column(Integer, index=True)
    wavelength = Column(String, index=True)
    omitted = Column(Boolean, index=True)
    file_map = Column(JSONB)
    cycle_id = Column(Integer, ForeignKey('cycles.id'))
    site_id = Column(Integer, ForeignKey('sites.id'))
    channel_layer_id = Column(Integer, ForeignKey('channel_layers.id'))
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    # Relationships to other tables
    cycle = relationship('Cycle', backref='channel_image_files')
    site = relationship('Site', backref='channel_image_files')
    channel_layer = relationship('ChannelLayer', backref='image_files')
    acquisition = relationship('Acquisition', backref='channel_image_files')

    #: Format string for filenames
    FILENAME_FORMAT = 'channel_image_t{t:0>3}_{w}_y{y:0>3}_x{x:0>3}_c{c:0>3}_z{z:0>3}.tif'

    def __init__(self, tpoint, zplane, wavelength, file_map, site_id,
                 acquisition_id, channel_layer_id=None, cycle_id=None,
                 omitted=False):
        '''
        Parameters
        ----------
        tpoint: int
            zero-based time point index in the time series
        zplane: int
            zero-based z-plane index of the focal plane within the three
            dimensional stack (projected images have only a single z-plane
            with index zero)
        wavelength: str
            name of the wavelength
        file_map: str
            binary JSON string encoding a mapping of the channel image file
            to its source microscope image file
            (and the position with the file defined by the OMEXML data model)
        site_id: int
            ID of the parent site
        acquisition_id: int
            ID of the parent acquisition
        cycle_id: int
            ID of the parent cycle
        channel_layer_id: int
            ID of the parent channel layer
        omitted: bool, optional
            whether the image file is considered empty, i.e. consisting only of
            background pixels without having biologically relevant information
            (default: ``False``)

        Note
        ----
        The relationship to `channel_layer` and `cycle` may not be known upon
        initialization of the object. The corresponding attributes may
        therefore be set later.
        '''
        self.tpoint = tpoint
        self.zplane = zplane
        self.wavelength = wavelength
        self.site_id = site_id
        self.omitted = omitted
        self.file_map = file_map
        self.acquisition_id = acquisition_id
        self.cycle_id = cycle_id
        self.channel_layer_id = channel_layer_id

    def get(self):
        '''Get image from store.

        Returns
        -------
        tmlib.image.ChannelImage
            image stored in the file
        '''
        logger.debug('get data from channel image file: %s', self.name)
        with PixelsReader(self.location) as f:
            pixels = f.read()
        metadata = ChannelImageMetadata(
            name=self.name,
            tpoint=self.tpoint,
            zplane=self.zplane,
            channel=self.channel_layer.channel.index,
            plate=self.site.well.plate.name,
            well=self.site.well.name,
            y=self.site.y,
            x=self.site.x,
            cycle=self.cycle.index,
            wavelength=self.wavelength
        )
        if self.site.intersection is not None:
            metadata.upper_overhang = self.site.intersection.upper_overhang
            metadata.lower_overhang = self.site.intersection.lower_overhang
            metadata.right_overhang = self.site.intersection.right_overhang
            metadata.left_overhang = self.site.intersection.left_overhang
            shift = [
                s for s in self.site.shifts if s.cycle_id == self.cycle_id
            ][0]
            metadata.x_shift = shift.x
            metadata.y_shift = shift.y
        return ChannelImage(pixels, metadata)

    @assert_type(data='tmlib.image.ChannelImage')
    def put(self, data):
        '''Put image to store.

        Parameters
        ----------
        data: tmlib.image.ChannelImage
            data that should be stored in the image file
        '''
        logger.debug('put data to channel image file: %s', self.name)
        with PixelsWriter(self.location) as f:
            f.write(data.pixels)

    @hybrid_property
    def name(self):
        '''str: name of the file'''
        if self.channel_layer_id is None:
            raise AttributeError(
                'Set the reference to the parent channel first!'
            )
        self._name = self.FILENAME_FORMAT.format(
            t=self.tpoint, w=self.site.well.name, y=self.site.y, x=self.site.x,
            c=self.channel_layer.channel.index, z=self.zplane
        )
        return self._name

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.cycle.channel_images_location, self.name)

    def __repr__(self):
        if self.channel_layer is None:
            return (
                '<ChannelImageFile('
                    'id=%r, tpoint=%r, zplane=%r, wavelength=%r, '
                    'well=%r, y=%r, x=%r'
                ')>'
                % (self.id, self.tpoint, self.zplane, self.wavelength,
                   self.site.well.name, self.site.y, self.site.x)
            )
        else:
            return (
                '<ChannelImageFile('
                    'id=%r, tpoint=%r, zplane=%r, channel=%r, wavelength=%r, '
                    'well=%r, y=%r, x=%r'
                ')>'
                % (self.id, self.tpoint, self.zplane,
                   self.channel_layer.channel.name, self.wavelength,
                   self.site.well.name, self.site.y, self.site.x)
            )


class ProbabilityImageFile(File, DateMixIn):

    '''A *probability image file* holds a single 2D pixels plane that was extracted
    from a microscope image file.

    Attributes
    ----------
    name: str
        name of the file
    tpoint: int
        zero-based time point index in the time series
    zplane: int
        zero-based z-plane index of the focal plane within the three
        dimensional stack (projected images have only a single z-plane
        with index zero)
    site_id: int
        ID of the parent site
    site: tmlib.models.Site
        parent site to which the image file belongs
    mapobject_type_id: int
        ID of the parent mapobject type
    mapobject_type: tmlib.models.MapobjectType
        parent channel to which the image file belongs
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'probability_image_files'

    __table_args__ = (
        UniqueConstraint('tpoint', 'zplane', 'site_id', 'mapobject_type_id'), 
    )

    # Table columns
    name = Column(String, index=True)
    tpoint = Column(Integer, index=True)
    zplane = Column(Integer, index=True)
    site_id = Column(Integer, ForeignKey('sites.id'))
    mapobject_type_id = Column(Integer, ForeignKey('mapobject_types.id'))

    # Relationships to other tables
    site = relationship('Site', backref='probability_image_files')
    mapobject_type = relationship(
        'MapobjectType', backref='probability_image_files'
    )

    FILENAME_FORMAT = 'probability_image_t{t:0>3}_{w}_y{y:0>3}_x{x:0>3}_m{m:0>3}_z{z:0>3}.tif'

    def __init__(self, tpoint, zplane, site_id, mapobject_type_id):
        '''
        Parameters
        ----------
        tpoint: int
            zero-based time point index in the time series
        zplane: int
            zero-based z-plane index of the focal plane within the three
            dimensional stack (projected images have only a single z-plane
            with index zero)
        site_id: int
            ID of the parent site
        site: tmlib.models.Site
            parent site to which the image file belongs
        mapobject_type_id: int
            ID of the parent mapobject type
        '''
        self.tpoint = tpoint
        self.zplane = zplane
        self.site_id = site_id
        self.mapobject_type_id = mapobject_type_id
        self.name = self.FILENAME_FORMAT.format(
            t=self.tpoint, w=self.site.well, y=self.site.y, x=self.site.x,
            m=self.mapobject_type_id, z=self.zplane
        )

    def get(self):
        '''Get image from store.

        Returns
        -------
        tmlib.image.ProbabilityImage
            image stored in the file
        '''
        logger.debug('get data from probability image file: %s', self.name)
        with PixelsReader(self.location) as f:
            pixels = f.read()
        # metadata = ProbabilityImageMetadata(
        #     name=self.name,
        #     tpoint=self.tpoint,
        #     zplane=self.zplane,
        #     mapobject_type_id=self.mapobject_type_id,
        #     site_id=self.site_id,
        # )
        metadata = None
        return ProbabilityImage(pixels, metadata)

    @assert_type(data='tmlib.image.ProbabilityImage')
    def put(self, data):
        '''Put image to store.

        Parameters
        ----------
        data: tmlib.image.ProbabilityImage
            data that should be stored in the image file
        '''
        logger.debug('put data to probability image file: %s', self.name)
        with PixelsWriter(self.location) as f:
            f.write(data.pixels)

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.mapobject_type.location, self.name)

    def __repr__(self):
        return (
            '<ProbabilityImageFile('
                'id=%r, tpoint=%r, zplane=%r, mapobject_type=%r, '
                'well=%r, y=%r, x=%r'
            ')>'
            % (self.id, self.tpoint, self.zplane, self.mapobject_type.name,
               self.site.well, self.site.y, self.site.x)
        )


class PyramidTileFile(File):

    '''

    Attributes
    ----------
    name: str
        name of the file
    group: int
        zero-based tile group index
    level: int
        zero-based zoom level index
    row: int
        zero-based row index of the tile at given `level`
    column: int
        zero-based column index of the tile at given zoom `level`
    channel_layer_id: int
        ID of the parent channel layer
    channel_layer: tmlib.models.ChannelLayer
        parent channel layer to which the tile belongs
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'pyramid_tile_files'

    __table_args__ = (
        UniqueConstraint('level', 'row', 'column', 'channel_layer_id'), 
    )

    # Table columns
    name = Column(String, index=True)
    group = Column(Integer, index=True)
    level = Column(Integer, index=True)
    row = Column(Integer, index=True)
    column = Column(Integer, index=True)
    channel_layer_id = Column(Integer, ForeignKey('channel_layers.id'))

    # Relationships to other tables
    channel_layer = relationship('ChannelLayer', backref='pyramid_tile_files')

    def __init__(self, name, group, level, row, column, channel_layer_id):
        '''
        Parameters
        ----------
        name: str
            name of the file
        group: int
            zero-based tile group index
        level: int
            zero-based zoom level index
        row: int
            zero-based row index of the tile at given `level`
        column: int
            zero-based column index of the tile at given zoom `level`
        channel_layer_id: int
            ID of the parent channel layer
        '''
        self.name = name
        self.group = group
        self.row = row
        self.column = column
        self.level = level
        self.channel_layer_id = channel_layer_id

    def get(self):
        '''Get tile from store.

        Returns
        -------
        tmlib.image.PyramidTile
            tile stored in the file
        '''
        logger.debug('get data from pyramid tile file: %s', self.name)
        with PixelsReader(self.location) as f:
            pixels = f.read(dtype=np.uint8)
        metadata = PyramidTileMetadata(
            name=self.name,
            group=self.group,
            level=self.level,
            row=self.row,
            column=self.column,
            tpoint=self.channel_layer.tpoint,
            zplane=self.channel_layer.zplane
        )
        return PyramidTile(pixels, metadata)

    @assert_type(data='tmlib.image.PyramidTile')
    def put(self, data):
        '''Put tile to store.

        Parameters
        ----------
        data: tmlib.image.PyramidTile
            data that should be stored in the file
        '''
        logger.debug('put data to pyramid tile file: %s', self.name)
        with PixelsWriter(self.location) as f:
            f.write(data.pixels)

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(
            self.channel_layer.location, 'TileGroup%d' % self.group, self.name
        )

    def __repr__(self):
        return (
            '<PyramidTile('
                'id=%r, channel=%r, tpoint=%r, zplane=%r, '
                'row=%r, column=%r, level=%r'
            ')>'
            % (self.id, self.channel_layer.channel.index,
               self.channel_layer.tpoint, self.channel_layer.zplane,
               self.row, self.column, self.level)
        )


class IllumstatsFile(File, DateMixIn):

    '''An *illumination statistics file* holds matrices for mean and standard
    deviation values calculated at each pixel position across all images of
    the same *channel* and *cycle*.

    Attributes
    ----------
    name: str
        name of the file
    channel_id: int
        ID of the parent channel
    channel: tmlib.models.Channel
        parent channel to which the image file belongs
    cycle_id: int
        ID of the parent cycle
    cycle: tmlib.models.Cycle
        parent cycle to which the image file belongs
    '''

    #: str: format string to build filename
    FILENAME_FORMAT = 'illumstats_{channel_id}.h5'

    #: str: name of the corresponding database table
    __tablename__ = 'illumstats_files'

    __table_args__ = (UniqueConstraint('channel_id', 'cycle_id'), )

    # Table columns
    name = Column(String, index=True)
    channel_id = Column(Integer, ForeignKey('channels.id'))
    cycle_id = Column(Integer, ForeignKey('cycles.id'))

    # Relationships to other tables
    channel = relationship('Channel', backref='illumstats_files')
    cycle = relationship('Cycle', backref='illumstats_files')

    def __init__(self, channel_id, cycle_id):
        '''
        Parameters
        ----------
        channel_id: int
            ID of the parent channel
        cycle_id: int
            ID of the parent cycle

        Raises
        ------
        ValueError
            when `name` doesn't match pattern specified by
            :py:attribute:`tmlib.files.ILLUMSTATS_FILENAME_FORMAT`
        '''
        self.channel_id = channel_id
        self.cycle_id = cycle_id
        self.name = self.FILENAME_FORMAT.format(
            channel_id=self.channel_id
        )

    def get(self):
        '''Get illumination statistics images from store.

        Returns
        -------
        Illumstats
            illumination statistics images
        '''
        logger.debug('get data from illumination statistics file: %s', self.name)
        metadata = IllumstatsImageMetadata(
            channel=self.channel.index,
            cycle=self.cycle.index
        )
        with DatasetReader(self.location) as f:
            mean = IllumstatsImage(f.read('mean'), metadata)
            std = IllumstatsImage(f.read('std'), metadata)
            keys = f.read('percentiles/keys')
            values = f.read('percentiles/values')
            percentiles = dict(zip(keys, values))
        return IllumstatsContainer(mean, std, percentiles).smooth()

    @assert_type(data='tmlib.image.IllumstatsContainer')
    def put(self, data):
        '''Put illumination statistics images to store.

        Parameters
        ----------
        data: IllumstatsContainer
            illumination statistics
        '''
        logger.debug('put data to illumination statistics file: %s', self.name)
        with DatasetWriter(self.location, truncate=True) as f:
            f.write('mean', data.mean.pixels)
            f.write('std', data.std.pixels)
            f.write('/percentiles/keys', data.percentiles.keys())
            f.write('/percentiles/values', data.percentiles.values())

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.cycle.illumstats_location, self.name)

    def __repr__(self):
        return (
            '<IllumstatsFile(id=%r, channel=%r)>'
            % (self.id, self.channel_id)
        )
