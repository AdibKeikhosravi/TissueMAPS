import os
import logging
from sqlalchemy import Column, String, Integer, Boolean, ForeignKey
from sqlalchemy.orm import relationship

from tmlib.models import Model

logger = logging.getLogger(__name__)

#: Format string for image filenames
CHANNEL_IMAGE_FILENAME_FORMAT = 'channel_image_t{t:0>3}_s{s:0>3}_c{c:0>3}_z{z:0>3}.tif'

#: Format string for illumination statistics filenames
ILLUMSTATS_FILENAME_FORMAT = 'illumstats_{channel}.h5'

PROBABILITY_IMAGE_FILENAME_FORMAT = 'probability_image_t{t:0>3}_s{s:0>3}_m{m:0>3}_z{z:0>3}.tif'


class MicroscopeImageFile(Model):

    '''Image file that was generated by the microscope.
    The file format differs between microscope types and may be vendor specific.

    Attributes
    ----------
    name: str
        name of the file
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.acquisition.Acquisition
        parent acquisition to which the file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'microscope_image_files'

    #: Table columns
    name = Column(String, index=True)
    upload_status = Column(String)
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    #: Relationships to other tables
    acquisition = relationship('Acquisition', backref='microscope_image_files')

    def __init__(self, name, acquisition):
        '''
        Parameters
        ----------
        name: str
            name of the microscope image file
        acquisition: tmlib.acquisition.Acquisition
            parent acquisition to which the microscope image file belongs
        '''
        self.name = name
        self.acquisition_id = acquisition.id
        self.upload_status = 'WAITING'

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(
            self.acquisition.microscope_images_location, self.name
        )

    def as_dict(self):
        '''
        Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name,
            'upload_status': self.upload_status
        }

    def __repr__(self):
        return '<MicroscopeImageFile(id=%r, name=%r)>' % (self.id, self.name)


class MicroscopeMetadataFile(Model):

    '''Metadata file that was generated by the microscope.
    The file format differs between microscope types and may be vendor specific.

    Attributes
    ----------
    name: str
        name of the file
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.acquisition.Acquisition
        parent acquisition to which the file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'microscope_metadata_files'

    #: Table columns
    name = Column(String, index=True)
    upload_status = Column(String)
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    #: Relationships to other tables
    acquisition = relationship('Acquisition', backref='microscope_metadata_files')

    def __init__(self, name, acquisition):
        '''
        Parameters
        ----------
        name: str
            name of the file
        acquisition: tmlib.acquisition.Acquisition
            parent acquisition to which the file belongs
        '''
        self.name = name
        self.acquisition_id = acquisition.id
        self.upload_status = 'WAITING'

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(
            self.acquisition.microscope_metadata_location, self.name
        )

    def as_dict(self):
        '''
        Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name,
            'upload_status': self.upload_status
        }

    def __repr__(self):
        return '<MicroscopeMetdataFile(id=%r, name=%r)>' % (self.id, self.name)


class OmeXmlFile(Model):

    '''`OMEXML <https://www.openmicroscopy.org/site/support/ome-model/ome-xml/>`_
    file that was extracted from a microscope image file using the
    `Bio-Formats library <http://www.openmicroscopy.org/site/products/bio-formats>`_.

    Attributes
    ----------
    name: str
        name of the file
    acquisition_id: int
        ID of the parent acquisition
    acquisition: tmlib.acquisition.Acquisition
        parent acquisition to which the file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'omexml_files'

    #: Table columns
    name = Column(String, index=True)
    acquisition_id = Column(Integer, ForeignKey('acquisitions.id'))

    #: Relationships to other tables
    acquisition = relationship('Acquisition', backref='omexml_files')

    def __init__(self, name, acquisition):
        '''
        Parameters
        ----------
        name: str
            name of the file
        acquisition: tmlib.acquisition.Acquisition
            parent acquisition to which the file belongs
        '''
        if not name.endswith('.ome.xml'):
            raise ValueError(
                'OMEXML file name must end with ".ome.xml".'
            )
        self.name = name
        self.acquisition_id = acquisition.id

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.acquisition.omexml_location, self.name)

    def as_dict(self):
        '''
        Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name
        }

    def __repr__(self):
        return '<OmeXmlFile(id=%r, name=%r)>' % (self.id, self.name)


class ChannelImageFile(Model):

    '''A *channel image file* holds a single 2D pixels plane that was extracted
    from a microscope image file. It represents a unique combination of
    time point, site, channel, and z-plane.

    Attributes
    ----------
    name: str
        name of the file
    tpoint: int
        zero-based time point index in the time series
    zplane: int
        zero-based z-plane index of the focal plane within the three
        dimensional stack (projected images have only a single z-plane
        with index zero)
    is_empty: bool
        whether the image file is considered empty, i.e. consisting only of
        background pixels without having biologically relevant information
    site_id: int
        ID of the parent site
    site: tmlib.models.Site
        parent site to which the image file belongs
    channel_id: int
        ID of the parent channel
    channel: tmlib.models.Channel
        parent channel to which the image file belongs
    cycle_id: int
        ID of the parent cycle
    cycle: tmlib.models.Cycle
        parent cycle to which the image file belongs
    channel_layer_id: int
        ID of the parent channel layer
    channel_layer: tmlib.models.ChannelLayer
        parent layer to which the image file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'channel_image_files'

    #: Table columns
    name = Column(String, index=True)  # unique=True ???
    tpoint = Column(Integer, index=True)
    zplane = Column(Integer, index=True)
    is_empty = Column(Boolean, index=True)
    channel_id = Column(Integer, ForeignKey('channels.id'))
    cycle_id = Column(Integer, ForeignKey('cycles.id'))
    site_id = Column(Integer, ForeignKey('sites.id'))
    channel_layer_id = Column(Integer, ForeignKey('channel_layers.id'))

    #: Relationships to other tables
    channel = relationship('Channel', backref='channel_image_files')
    cycle = relationship('Cycle', backref='channel_image_files')
    site = relationship('Site', backref='channel_image_files')
    channel_layer = relationship('ChannelLayer', backref='channel_image_files')

    def __init__(self, tpoint, zplane, site, channel, channel_layer, cycle,
                 is_empty=False):
        '''
        Parameters
        ----------
        tpoint: int
            zero-based time point index in the time series
        zplane: int
            zero-based z-plane index of the focal plane within the three
            dimensional stack (projected images have only a single z-plane
            with index zero)
        site: tmlib.models.Site
            parent site to which the image file belongs
        channel: tmlib.models.Channel
            parent channel to which the image file belongs
        cycle: tmlib.models.Cycle
            parent cycle to which the image file belongs
        channel_layer: tmlib.models.ChannelLayer
            parent layer to which the image file belongs
        is_empty: bool, optional
            whether the image file is considered empty, i.e. consisting only of
            background pixels without having biologically relevant information
            (default: ``False``)
        '''
        self.tpoint = tpoint
        self.zplane = zplane
        self.site_id = site.id
        self.cycle_id = cycle.id
        self.channel_id = channel.id
        self.channel_layer_id = channel_layer.id
        self.is_empty = is_empty
        self.name = CHANNEL_IMAGE_FILENAME_FORMAT.format(
            t=self.tpoint, s=self.site_id, c=self.channel_id, z=self.zplane
        )

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.cycle.images_location, self.name)

    def __repr__(self):
        return (
            '<ChannelImageFile(id=%r, tpoint=%r, site=%r, channel=%r, zplane=%r)>'
            % (self.id, self.tpoint, self.site_id, self.channel_id, self.zplane)
        )


class ProbabilityImageFile(Model):

    '''A *probability image file* holds a single 2D pixels plane that was extracted
    from a microscope image file.

    Attributes
    ----------
    name: str
        name of the file
    tpoint: int
        zero-based time point index in the time series
    zplane: int
        zero-based z-plane index of the focal plane within the three
        dimensional stack (projected images have only a single z-plane
        with index zero)
    site_id: int
        ID of the parent site
    site: tmlib.models.Site
        parent site to which the image file belongs
    mapobject_type_id: int
        ID of the parent mapobject type
    mapobject_type: tmlib.models.MapobjectType
        parent channel to which the image file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'probability_image_files'

    #: Table columns
    name = Column(String, index=True)
    tpoint = Column(Integer, index=True)
    zplane = Column(Integer, index=True)
    site_id = Column(Integer, ForeignKey('sites.id'))
    mapobject_type_id = Column(Integer, ForeignKey('mapobject_types.id'))

    #: Relationships to other tables
    site = relationship('Site', backref='probability_image_files')
    mapobject_type = relationship('MapobjectType', backref='probability_image_files')

    def __init__(self, tpoint, zplane, site, mapobject_type):
        '''
        Parameters
        ----------
        tpoint: int
            zero-based time point index in the time series
        zplane: int
            zero-based z-plane index of the focal plane within the three
            dimensional stack (projected images have only a single z-plane
            with index zero)
        site: tmlib.models.Site
            parent site to which the image file belongs
        mapobject_type: tmlib.models.MapobjectType
            parent channel to which the image file belongs
        '''
        self.tpoint = tpoint
        self.zplane = zplane
        self.site_id = site.id
        self.mapobject_type_id = mapobject_type.id
        self.name = PROBABILITY_IMAGE_FILENAME_FORMAT.format(
            t=self.tpoint, s=self.site_id, m=self.mapobject_type_id,
            z=self.zplane
        )

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.cycle.images_location, self.name)

    def __repr__(self):
        return (
            '<ProbabilityImageFile(id=%r, tpoint=%r, site=%r, objects=%r, zplane=%r)>'
            % (self.id, self.tpoint, self.site_id, self.object_id, self.zplane)
        )


class IllumStatsFile(Model):

    '''An *illumination statistics file* holds matrices for mean and standard
    deviation values calculated at each pixel position across all images of
    the same *channel* and *cycle*.

    Attributes
    ----------
    name: str
        name of the file
    channel_id: int
        ID of the parent channel
    channel: tmlib.models.Channel
        parent channel to which the image file belongs
    cycle_id: int
        ID of the parent cycle
    cycle: tmlib.models.Cycle
        parent cycle to which the image file belongs
    '''

    #: Name of the corresponding database table
    __tablename__ = 'illumstats_files'

    #: Table columns
    name = Column(String, index=True)
    channel_id = Column(Integer, ForeignKey('channels.id'))
    cycle_id = Column(Integer, ForeignKey('cycles.id'))

    #: Relationships to other tables
    channel = relationship('Channel', backref='illumstats_files')
    cycle = relationship('Cycle', backref='illumstats_files')

    def __init__(self, channel, cycle):
        '''
        Parameters
        ----------
        channel: int
            zero-based channel index
        cycle: tmlib.cycle.Cycle
            parent cycle to which the image file belongs

        Raises
        ------
        ValueError
            when `name` doesn't match pattern specified by
            :py:attribute:`tmlib.files.ILLUMSTATS_FILENAME_FORMAT`
        '''
        self.channel_id = channel.id
        self.cycle_id = cycle.id
        self.name = ILLUMSTATS_FILENAME_FORMAT.format(channel=self.channel)

    @property
    def location(self):
        '''str: location of the file'''
        return os.path.join(self.cycle.illumstats_location, self.name)

    def __repr__(self):
        return (
            '<IllumstatsFile(id=%r, channel=%r)>'
            % (self.id, self.channel_id)
        )
