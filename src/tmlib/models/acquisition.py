import os
import logging
from sqlalchemy import Column, String, Integer, Text, ForeignKey
from sqlalchemy.orm import relationship, backref

from tmlib.readers import JsonReader
from tmlib.metadata import ImageFileMapping
from tmlib.models.base import Model, DateMixIn
from tmlib.models.status import FileUploadStatus as fus
# from tmlib.models.utils import auto_remove_directory
from tmlib.utils import autocreate_directory_property

logger = logging.getLogger(__name__)

#: Format string for acquisition locations
ACQUISITION_LOCATION_FORMAT = 'acquisition_{id}'


# @auto_remove_directory(lambda obj: obj.location)
class Acquisition(Model, DateMixIn):

    '''An *acquisition* contains all files belonging to one microscope image
    acquisition process. Note that in contrast to a *cycle*, an *acquisition*
    may contain more than one time point.

    The incentive to grouped files this way relates to the fact that most
    microscopes generate separate metadata files for each *acquisition*.

    Attributes
    ----------
    name: str
        name of the acquisition
    description: str
        description of the acquisition
    status: str
        processing status
    plate_id: int
        ID of the parent plate
    plate: tmlib.models.Plate
        parent plate to which the acquisition belongs
    microscope_image_files: List[tmlib.models.MicroscopeImageFile]
        image files generated by the microscope
    microscope_metadata_files: List[tmlib.models.MicroscopeMetadataFile]
        metadata files generated by the microscope
    ome_xml_files: List[tmlib.models.OmeXmlFile]
        OMEXML files extracted from microscope image files
    '''

    #: str: name of the corresponding database table
    __tablename__ = 'acquisitions'

    # Table columns
    name = Column(String, index=True)
    description = Column(Text)
    plate_id = Column(Integer, ForeignKey('plates.id'))

    # Relationships to other tables
    plate = relationship(
        'Plate',
        backref=backref('acquisitions', cascade='all, delete-orphan')
    )

    def __init__(self, name, plate_id, description=''):
        '''
        Parameters
        ----------
        name: str
            name of the acquisition
        plate_id: int
            ID of the parent plate
        description: str, optional
            description of the acquisition
        '''
        # TODO: ensure that name is unique within plate
        self.name = name
        self.description = description
        self.plate_id = plate_id

    @autocreate_directory_property
    def location(self):
        '''str: location were the acquisition content is stored'''
        if self.id is None:
            raise AttributeError(
                'Acquisition "%s" doesn\'t have an entry in the database yet. '
                'Therefore, its location cannot be determined.' % self.name
            )
        return os.path.join(
            self.plate.acquisitions_location,
            ACQUISITION_LOCATION_FORMAT.format(id=self.id)
        )

    @autocreate_directory_property
    def microscope_images_location(self):
        '''str: location where microscope image files are stored'''
        return os.path.join(self.location, 'microscope_images')

    @autocreate_directory_property
    def microscope_metadata_location(self):
        '''str: location where microscope metadata files are stored'''
        return os.path.join(self.location, 'microscope_metadata')

    @autocreate_directory_property
    def omexml_location(self):
        '''str: location where extracted OMEXML files are stored'''
        return os.path.join(self.location, 'omexml')

    @property
    def status(self):
        '''str: upload status based on the status of microscope files'''
        child_status = set([
            f.upload_status for f in self.microscope_image_files
        ])
        child_status.union(set([
            f.upload_status for f in self.microscope_metadata_files
        ]))
        if fus.UPLOADING in child_status:
            return fus.UPLOADING
        elif len(child_status) == 1 and fus.COMPLETE in child_status:
            return fus.COMPLETE
        else:
            return fus.WAITING

    def as_dict(self):
        '''Return attributes as key-value pairs.

        Returns
        -------
        dict
        '''
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'status': self.status,
            'microscope_image_files':
                [im.name for im in self.microscope_image_files],
            'microscope_metadata_files':
                [md.name for md in self.microscope_metadata_files]
        }

    def __repr__(self):
        return '<Acquisition(id=%r, name=%r)>' % (self.id, self.name)

    @property
    def image_mapping_file(self):
        '''str: name of the file that contains a mapping of
        images stored in the microscope image files to OME *Image* elements
        '''
        return os.path.join(self.location, 'image_file_mapping.json')

    @property
    def image_mapping(self):
        '''List[tmlib.metadata.ImageFileMapping]: key-value pairs to map the
        location of individual 2D pixel planes within the source microscope
        image files to destination image images.
        '''
        image_mapping = list()
        with JsonReader(self.image_mapping_file) as f:
            hashmap = f.read()
        for element in hashmap:
            image_mapping.append(ImageFileMapping(**element))
        return image_mapping
