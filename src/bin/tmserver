#!/usr/bin/env python
import argparse
import logging
from werkzeug.contrib.profiler import ProfilerMiddleware

from tmserver.appfactory import create_app

logo = """
  _____ _                    __  __    _    ____  ____
 |_   _(_)___ ___ _   _  ___|  \/  |  / \  |  _ \/ ___|
   | | | / __/ __| | | |/ _ \ |\/| | / _ \ | |_) \___ \\
   | | | \__ \__ \ |_| |  __/ |  | |/ ___ \|  __/ ___) |
   |_| |_|___/___/\__,_|\___|_|  |_/_/   \_\_|   |____/
"""


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='TissueMAPS dev server')
    parser.add_argument(
        '--port', type=int, default=5002,
        help='the port on which the server should listen (default: 5002)'
    )
    parser.add_argument(
        '--gevent', action='store_true', default=False,
        help='if the dev server should run in gevent mode'
    )
    parser.add_argument(
        '--logging', dest='logging_level', type=str, default='INFO',
        choices={'CRITICAL', 'INFO', 'DEBUG'},
        help='logging level (default: INFO)'
    )
    parser.add_argument(
        '--config_file', type=str,
        help='path to configuration file'
    )
    parser.add_argument(
        '--profile', action='store_true', default=False,
        help='if application should be profiled'
    )

    print logo
    args = parser.parse_args()

    logging_levels = {
        'INFO': logging.INFO,
        'DEBUG': logging.DEBUG,
        'CRITICAL': logging.CRITICAL
    }
    log_level = logging_levels[args.logging_level]

    app = create_app(
        config_overrides={'SCHEDULER': 'threading'},log_level=log_level
    )
    if args.profile:
        app.config['PROFILE'] = True
        app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[30])

    if args.gevent:
        app.run(port=args.port, debug=True)
    else:
        # Flask's DEBUG mode doesn't support greenlets
        app.run(port=args.port, debug=True, threaded=True)
