#!/usr/bin/env python
import os
import sys
import argparse
import sqlalchemy.orm.exc

import tmlib.models
from tmlib.workflow.metaconfig import SUPPORTED_MICROSCOPE_TYPES
from tmlib.models.plate import SUPPORTED_PLATE_FORMATS
from tmlib.models.plate import SUPPORTED_PLATE_AQUISITION_MODES

# Don't trash the user with long tracebacks
sys.tracebacklimit = 0


def valid_dir(path):
    if not os.path.exists(path):
        raise OSError('Provided path does not exist: %s' % path)
    return path


def add_experiment(experiment_name, user_name, microscope_type, plate_format,
                   plate_acquisition_mode):
    with tmlib.models.utils.Session() as session:
        try:
            user = session.query(tmlib.models.User).\
                filter_by(name=user_name).one()
        except sqlalchemy.orm.exc.NoResultFound:
            raise ValueError('Unknown user "%s"!' % user_name)
        except:
            raise
        experiment = session.get_or_create(
            tmlib.models.Experiment,
            name=experiment_name, user_id=user.id,
            microscope_type=microscope_type,
            plate_format=plate_format,
            plate_acquisition_mode=plate_acquisition_mode
        )
        return experiment.id


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='''
            Add a new experiment to the TissueMAPS database.
        '''
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True, type=str,
        help='name of the experiment'
    )
    parser.add_argument(
        '-u', '--user_name', required=True, type=str,
        help='user name'
    )
    parser.add_argument(
        '--plate_format', type=int, default=384,
        choices=SUPPORTED_PLATE_FORMATS,
        help='well plate format (default: 384)'
    )
    parser.add_argument(
        '--microscope_type', type=str, default='cellvoyager',
        choices=SUPPORTED_MICROSCOPE_TYPES,
        help='microscope type (default: cellvoyager)'
    )
    parser.add_argument(
        '--plate_acquisition_mode', type=str, default='basic',
        choices=SUPPORTED_PLATE_AQUISITION_MODES,
        help='''
            whether multiple acquisitions of the same plate are interpreted 
            as time points or multiplexing iterations (default: basic)
        '''
    )

    args = parser.parse_args()

    experiment_id = add_experiment(
        args.experiment_name, args.user_name, args.microscope_type,
        args.plate_format, args.plate_acquisition_mode
    )

    print(
        'EXPERIMENT ID: {id}\nRemember it - you will need it to process the '
        'experiment via the command line!'.format(id=experiment_id)
    )
