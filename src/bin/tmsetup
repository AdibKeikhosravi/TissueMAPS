#!/usr/bin/env python
import os
import logging
import argparse
import subprocess
import sys
import collections

from tmsetup.config import Setup, load_inventory
from tmsetup.log import configure_logging, map_logging_verbosity
from tmsetup.config import HOSTNAME_FORMAT


PLAYBOOKS_HOME = os.path.abspath(
    os.path.join(__file__, '..', '..', '..', 'playbooks')
)


def run(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    for c in iter(lambda: process.stdout.read(1), ''):
        sys.stdout.write(c)


def build_ansible_commands(args):
    logger.info('build Ansible commands')
    setup = Setup()
    dynamic_inventory_file = os.path.abspath(
        os.path.join(__file__, '..', 'inventory.py')
    )
    inventory = load_inventory()
    commands = list()
    variables = dict()
    groups_to_deploy = list()
    for cluster in setup.grid.clusters:
        if args.cluster is not None:
            if cluster.name != args.cluster:
                continue
        for node_type in cluster.node_types:
            if args.node_type is not None:
                if node_type.name != args.node_type:
                    continue
            for group in node_type.groups:
                if args.groups:
                    if group.name not in args.groups:
                        continue
                logger.info('include Ansible group: %s', group.name)
                groups_to_deploy.append(group.name)
                if args.action == 'deploy':
                    if group.playbook is not None:
                        cmd = _build_command(
                            args.verbosity, dynamic_inventory_file,
                            group.playbook
                        )
                        commands.append(cmd)
                    # # NOTE: variables are already provided via group_vars files
                    # if group.vars is not None:
                    #     for k, v in group.vars.iteritems():
                    #         variables[k] = v

    required_groups = {
        'tissuemaps_web', 'tissuemaps_compute', 'tissuemaps_database'
    }
    for group in required_groups:
        if group not in groups_to_deploy:
            raise SetupDescriptionError(
                'Required group "%s" is missing!' % group
            )

    if args.action in {'launch', 'terminate', 'start', 'stop'}:
        if args.action == 'launch':
            logger.info('launch virtual machines')
            variables['instance_state'] = 'present'
        elif args.action == 'terminate':
            logger.info('terminate virtual machines')
            variables['instance_state'] = 'absent'
        elif args.action == 'start':
            # TODO: dependent on cloud provider
            # ec2: started
            # gce: running
            # os: -
            raise ValueError('Starting VMs is not yet supported')
        elif args.action == 'stop':
            # TODO: dependent on cloud provider
            # ec2: stopped
            # gce: stopped
            # os: -
            raise ValueError('Stopping VMs is not yet supported')
        cmd = _build_command(
            args.verbosity, dynamic_inventory_file,
            os.path.join(PLAYBOOKS_HOME, 'instance.yml'), variables,
            set(groups_to_deploy)
        )
        commands.append(cmd)
    elif args.action == 'deploy':
        # This playbook must be called after the individual components have
        # been built.
        cmd = _build_command(
            args.verbosity, dynamic_inventory_file,
            os.path.join(PLAYBOOKS_HOME, 'site.yml'),
            variables,
            set(groups_to_deploy)
        )
        commands.append(cmd)
        cmd = _build_command(
            args.verbosity, dynamic_inventory_file,
            os.path.join(ELASTICLUSTER_PLAYBOOKS_HOME, 'site.yml'),
            variables.update({'ansible_become': 'yes'}),
            set(groups_to_deploy)
        )
        commands.append(cmd)

    return commands


def _build_command(verbosity, inventory, playbook, variables=dict(),
        hosts=set()):
    var_strings = list()
    for k, v in variables.iteritems():
        var_strings.append('='.join([k, v]))
    cmd = [
        'ansible-playbook',
        '-i', inventory,
        playbook,
    ]
    if verbosity > 0:
        cmd.append('-%s' % (verbosity * 'v'))
    if variables:
        cmd.extend(['-e', '%s' % ','.join(var_strings)])
    if hosts:
        cmd.extend(['--limit', '%s' % ','.join(hosts)])
    return cmd


def main(args):
    # TODO: let inventory save playbook locations into file
    commands = build_ansible_commands(args)
    logger.info('run Ansible commands')
    for cmd in commands:
        logger.debug(' '.join(cmd))
        run(cmd)


if __name__ == '__main__':

    def check_dependency(required_arg, forbidden_args={}):
        class ArgumentDependencyAction(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if getattr(namespace, required_arg) is None:
                    parser.error(
                        'Argument "--%s" also requires "--%s".' % (
                            self.dest, required_arg
                        )
                    )
                if forbidden_args:
                    for arg in forbidden_args:
                        if getattr(namespace, arg) is not None:
                            parser.error(
                                'Argument "--%s" cannot be used together with '
                                ' "--%s".' % (self.dest, arg)
                            )
                setattr(namespace, self.dest, values)
        return ArgumentDependencyAction


    parser = argparse.ArgumentParser(
        description='Setup TissueMAPS on Ubuntu.'
    )
    parser.add_argument(
        '--verbosity', '-v', action='count', default=0,
        help='increase logging verbosity'
    )
    parser.add_argument(
        '--cluster', '-c', metavar='CLUSTER', type=str,
        help='limit action to VMs of a particular cluster'
    )
    parser.add_argument(
        '--groups', '-g', metavar='GROUP', nargs='+', type=str, default=set(),
        help='limit action to individual Ansible groups'
    )
    parser.add_argument(
        '--node_type', '-n', metavar='NODETYPE', type=str,
        action=check_dependency('cluster'),
        help='limit action to VMs of a partiuclar cluster node_type'
    )

    subparsers = parser.add_subparsers(dest='action', help='action')
    subparsers.required = True

    launch_subparser = subparsers.add_parser(
        'launch',
        help='launch new virtual machine (VM) instances'
    )
    launch_subparser.set_defaults(method='launch')
    launch_subparser.description = '''
        Launch new virtual machine instances.
    '''

    terminate_subparser = subparsers.add_parser(
        'terminate',
        help='terminate existing virtual machine (VM) instances'
    )
    terminate_subparser.set_defaults(method='terminate')
    terminate_subparser.description = '''
        Terminate existing virtual machine instances.
    '''

    # TODO: start/stop subparsers

    deploy_subparser = subparsers.add_parser(
        'deploy',
        help='deploy TissueMAPS on existing virtual machine (VM) instances'
    )
    deploy_subparser.set_defaults(method='deploy')
    deploy_subparser.description = '''
        Deploy TissueMAPS on existing virtual machine instances.
    '''

    args = parser.parse_args()
    args.groups = set(args.groups)

    configure_logging()
    log_level = map_logging_verbosity(args.verbosity)
    logger = logging.getLogger(os.path.basename(__file__))
    logger.setLevel(log_level)
    tmsetup_logger = logging.getLogger('tmsetup')
    tmsetup_logger.setLevel(log_level)

    main(args)
