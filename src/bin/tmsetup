#!/usr/bin/env python
import os
import argparse
import subprocess
import sys

from tmsetup.config import load_setup
from tmsetup.config import load_inventory


def run(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    for c in iter(lambda: process.stdout.read(1), ''):
        sys.stdout.write(c)


def build_ansible_commands(args):
    setup = load_setup()
    dynamic_inventory_file = os.path.abspath(
        os.path.join(__file__, '..', 'inventory.py')
    )
    inventory = load_inventory()
    commands = list()
    for cluster in setup['grid']['clusters']:
        for category in cluster['categories']:
            for group in category['groups']:
                excluded_hosts = list()
                if args.host in inventory.items(group['name']):
                    excluded_hosts += args.host
                elif (args.cluster == cluster['name'] or
                        args.group == group['name']):
                    if (args.category is None or
                            args.category == category['name']):
                        excluded_hosts += [
                            item[0]
                            for item in inventory.items(group['name'])
                        ]
                if args.mode == 'deploy':
                    # NOTE: variables are already provided via group_vars
                    # files
                    cmd = _build_command(
                        args.verbosity, dynamic_inventory_file,
                        group['playbook'], dict(), excluded_hosts
                    )
                    commands.append(cmd)

    if args.mode in {'launch', 'terminate', 'start', 'stop'}:
        playbook_file = os.path.abspath(
            os.path.join(__file__, '..', 'playbooks', 'instances.yml')
        )
        if args.mode == 'launch':
            variables = {'instance_state': 'present'}
        elif args.mode == 'terminate':
            variables = {'instance_state': 'absent'}
        elif args.mode == 'start':
            # TODO: dependent on cloud provider
            # ec2: started
            # gce: running
            # os: -
            raise ValueError('Starting VMs is not yet supported')
            # variables = 'instance_state=running'
        elif args.mode == 'stop':
            # TODO: dependent on cloud provider
            # ec2: stopped
            # gce: stopped
            # os: -
            raise ValueError('Stopping VMs is not yet supported')
            # variables = 'instance_state=stopped'
            cmd = _build_command(
                args.verbosity, dynamic_inventory_file,
                playbook_file, variables, excluded_hosts
            )
            commands.append(cmd)

    return commands


def _build_command(verbosity, inventory, playbook, variables, hosts):
    var_string = str()
    for k, v in variables.iteritems():
        var_string = ','.join([var_string, '='.join([k, v])])
    cmd = [
        'ansible-playbook',
        '-%s' % (verbosity * 'v'),
        '-i', inventory,
        playbook,
    ]
    if variables:
        cmd.extend(['-e', var_string])
    if hosts:
        cmd.extend(['--limit', ','.join(hosts)])
    return cmd


def main(args):
    # TODO: let inventory save playbook locations into file
    commands = build_ansible_commands(args)
    for cmd in commands:
        print ' '.join(cmd)
        # run(cmd)


if __name__ == '__main__':

    def check_dependency(arg):
        class ArgumentDependency(argparse.Action):
            def __call__(self, parser, namespace, values, option_string=None):
                if getattr(namespace, arg) is None:
                    parser.error(
                        'Argument "--%s" also requires "--%s".' % (
                            self.dest, arg
                        )
                    )
                else:
                    setattr(namespace, self.dest, values)
        return ArgumentDependency

    parser = argparse.ArgumentParser(
        description='Setup TissueMAPS on Ubuntu.'
    )
    parser.add_argument(
        '--verbosity', '-v', action='count', default=0,
        help='increase logging verbosity'
    )
    target_group = parser.add_mutually_exclusive_group()
    target_group.add_argument(
        '--host', metavar='HOST_NAME', type=str,
        help='limit action to single VM instance'
    )
    target_group.add_argument(
        '--cluster', metavar='CLUSTER_NAME', type=str,
        help='limit action to VM instances of a single cluster'
    )
    target_group.add_argument(
        '--group', metavar='GROUP_NAME', type=str,
        help='limit action to VM instances of an Ansible group'
    )
    parser.add_argument(
        '--category', dest='category', type=str,
        action=check_dependency('cluster'),
        help='limit action to VM instances of a single cluster category'
    )

    subparsers = parser.add_subparsers(dest='mode', help='mode')
    subparsers.required = True

    launch_subparser = subparsers.add_parser(
        'launch',
        help='launch virtual machine (VM) instances'
    )
    launch_subparser.set_defaults(method='launch')

    terminate_subparser = subparsers.add_parser(
        'launch',
        help='launch virtual machine (VM) instances'
    )
    terminate_subparser.set_defaults(method='terminate')

    # TODO: start/stop subparsers

    deploy_subparser = subparsers.add_parser(
        'deploy',
        help='deploy application on virtual machine (VM) instances'
    )
    deploy_subparser.set_defaults(method='deploy')

    args = parser.parse_args()
    main(args)
