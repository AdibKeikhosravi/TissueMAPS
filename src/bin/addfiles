#!/usr/bin/env python
import os
import re
import shutil
import argparse
import paramiko
import sqlalchemy.orm.exc
from werkzeug.utils import secure_filename

import tmlib.models as tm
from tmlib.models.status import FileUploadStatus
from tmlib.workflow.metaconfig import get_microscope_type_regex


class RemoteFileCopy(object):

    def __enter__(self):
        # TODO
        hostname = ''
        username = ''
        key_name = ''
        self.ssh = paramiko.SSHClient()
        key = paramiko.RSAKey.from_private_key_file(
            os.path.expanduser(os.path.join('~', '.ssh', key_name))
        )
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.connect(hostname=hostname, username=username, pkey=key)
        self.sftp = self.ssh.open_sftp()
        return self

    def __exit__(self, except_type, except_value, except_trace):
        self.sftp.close()
        self.ssh.close()

    def copy(self, src, dst):
        self.sftp.put(src, dst)


class LocalFileCopy(object):

    def __enter__(self):
        return self

    def __exit__(self, except_type, except_value, except_trace):
        pass  # ???

    def copy(self, src, dst):
        shutil.copyfile(src, dst)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='''
            Add microscope files to an existing acquisition
            in the TissueMAPS database.
        '''
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True,
        help='name of the parent experiment'
    )
    parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the parent plate'
    )
    parser.add_argument(
        '-a', '--acquisition_name', required=True,
        help='name of the new acquisition'
    )
    parser.add_argument(
        '-s', '--source_directory', required=True,
        help='path to directory that contains the microscope files'
    )
    parser.add_argument(
        '-c', '--copy', action='store_true',
        help='copy files from source directory'
    )
    args = parser.parse_args()

    with tm.utils.MainSession() as session:
        try:
            experiment = session.query(tm.Experiment).\
                filter_by(name=args.experiment_name).\
                one()
            experiment_id = experiment.id
            microscope_type = experiment.microscope_type
        except sqlalchemy.orm.exc.NoResultFound:
            raise ValueError(
                'Experiment "%s" does not exist!' % args.experiment_name
            )
        except:
            raise

    with tm.utils.ExperimentSession(experiment_id=experiment_id) as session:
        try:
            acquisition = session.query(tm.Acquisition).\
                join(tm.Plate).\
                filter(tm.Plate.name == args.plate_name).\
                filter(tm.Acquisition.name == args.acquisition_name).\
                one()
        except sqlalchemy.orm.exc.NoResultFound:
            raise ValueError(
                'Acquisition "%s" does not exist for plate "%s" and '
                'experiment "%s"!'
                % (args.acquisition_name, args.plate_name, args.experiment_name)
            )
        except:
            raise

        # Register all files in the database.
        # This will automatically set upload_status to "WAITING".
        if not os.path.exists(args.source_directory):
            raise OSError(
                'Source directory does not exist: %s' % args.source_directory
            )
        r_image, r_metadata= get_microscope_type_regex(microscope_type)
        image_file_names = [
            f.name for f in acquisition.microscope_image_files
        ]
        metdata_file_names = [
            f.name for f in acquisition.microscope_metadata_files
        ]
        for f in os.listdir(args.source_directory):
            if r_image.search(f):
                name = secure_filename(f)
                # Skip already inserted files.
                if name not in image_file_names:
                    print 'register image file "%s"' % f
                    file = session.get_or_create(
                        tm.MicroscopeImageFile,
                        name=name, acquisition_id=acquisition.id
                    )
            elif r_metadata.search(f):
                name = secure_filename(os.path.basename(f))
                if name not in metdata_file_names:
                    print 'register metadata file "%s"' % f
                    file = tm.MicroscopeMetadataFile(
                        name=name, acquisition_id=acquisition.id
                    )
                    session.add(file)
                    session.flush()
            else:
                print 'unknow file format: "%s"' % f

        session.commit()

        if args.copy:
            with LocalFileCopy() as c:

                # Copy ("upload") the files and update their upload_status.
                for f in os.listdir(args.source_directory):
                    name = secure_filename(f)

                    # in case it's an image file
                    file = session.query(tm.MicroscopeImageFile).\
                        filter_by(name=name, acquisition_id=acquisition.id).\
                        one_or_none()
                    if file is not None:
                        if file.upload_status != FileUploadStatus.COMPLETE:
                            print 'copy image file "%s"' % f
                            src = os.path.join(args.source_directory, f)
                            dst = file.location
                            file.upload_status = FileUploadStatus.UPLOADING
                            session.add(file)
                            session.commit()
                            c.copy(src, dst)
                            file.upload_status = FileUploadStatus.COMPLETE
                            session.add(file)
                            session.commit()

                    # in case it's a metadata file
                    file = session.query(tm.MicroscopeMetadataFile).\
                        filter_by(name=name, acquisition_id=acquisition.id).\
                        one_or_none()
                    if file is not None:
                        if file.upload_status != FileUploadStatus.COMPLETE:
                            print 'copy metadata file "%s"' % f
                            src = os.path.join(args.source_directory, f)
                            dst = file.location
                            file.upload_status = FileUploadStatus.UPLOADING
                            session.add(file)
                            session.commit()
                            c.copy(src, dst)
                            file.upload_status = FileUploadStatus.COMPLETE
                            session.add(file)
                            session.commit()
