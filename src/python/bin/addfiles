#!/usr/bin/env python
import os
import logging
import argparse

from tmlib.logging_utils import configure_logging
from tmlib.logging_utils import map_logging_verbosity

from tmclient.upload import FileUploader

logger = logging.getLogger(__name__)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='''
            Add microscope files to an existing acquisition TissueMAPS.
        '''
    )
    parser.add_argument(
        '-H', '--hostname', required=True,
        help='hostname of TissueMAPS instance'
    )
    parser.add_argument(
        '-U', '--username', required=True,
        help='name of TissueMAPS user'
    )
    parser.add_argument(
        '-v', '--verbosity', action='count', default=0,
        help='increase logging verbosity'
    )
    parser.add_argument(
        '-e', '--experiment_name', required=True,
        help='name of the parent experiment'
    )
    parser.add_argument(
        '-p', '--plate_name', required=True,
        help='name of the parent plate'
    )
    parser.add_argument(
        '-a', '--acquisition_name', required=True,
        help='name of the acquisition'
    )
    parser.add_argument(
        '-s', '--source_directory', required=True,
        help='path to directory that contains the microscope files'
    )
    args = parser.parse_args()

    logging_level = map_logging_verbosity(args.verbosity)
    configure_logging()
    tmlib_logger = logging.getLogger('tmlib')
    tmlib_logger.setLevel(logging_level)
    logger.setLevel(logging_level)

    args.source_directory = os.path.expandvars(args.source_directory)
    args.source_directory = os.path.expanduser(args.source_directory)

    uploader = FileUploader(args.hostname)
    password = uploader.load_credentials(args.username)
    uploader.login(args.username, password)

    filenames = os.listdir(args.source_directory)
    acquisition_id = uploader.get_acquisition_id(
        args.experiment_name, args.plate_name, args.acquisition_name
    )
    registered_filenames = uploader.register_files_for_upload(
        acquisition_id, filenames
    )
    for name in registered_filenames:
        logger.info('upload file: %s', name)
        filepath = os.path.join(args.source_directory, name)
        uploader.upload_file(acquisition_id, filepath)
